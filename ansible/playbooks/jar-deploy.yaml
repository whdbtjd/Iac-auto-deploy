---
- name: Deploy JAR File with Robust Service Management
  hosts: webservers

  tasks:
    - name: Stop voting-app service
      systemd:
        name: voting-app
        state: stopped
      become: yes
      failed_when: false

    - name: Wait for service to completely stop
      wait_for:
        timeout: 15
      
    - name: Verify service is stopped
      systemd:
        name: voting-app
      register: stop_status
      become: yes
      
    - name: Log service stop status
      debug:
        msg: "Service stop status: {{ stop_status.status.ActiveState }}"

    - name: Copy JAR file from files directory (GitHub Actions prepared)
      copy:
        src: "{{ jar_file | default('../files/app.jar') }}"
        dest: /opt/app/app.jar
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      become: yes
      when: jar_file is defined or ansible_check_mode == false

    - name: Copy JAR file from build location (fallback)
      copy:
        src: "{{ jar_source_path | default('../../backend/build/libs/') }}"
        dest: /opt/app/app.jar
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      become: yes
      when: jar_source_path is defined and jar_file is not defined

    - name: Check if JAR file exists
      stat:
        path: /opt/app/app.jar
      register: jar_file_stat

    - name: Fail if JAR file not found
      fail:
        msg: "JAR file not found at /opt/app/app.jar"
      when: not jar_file_stat.stat.exists

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: yes

    - name: Start voting-app service with retry
      systemd:
        name: voting-app
        state: started
        enabled: yes
      become: yes
      register: start_result
      retries: 3
      delay: 10
      until: start_result is succeeded

    - name: Wait for service to initialize
      wait_for:
        timeout: 30

    - name: Verify service is running
      systemd:
        name: voting-app
      register: service_status
      become: yes

    - name: Show detailed service status
      debug:
        msg: "Service ActiveState: {{ service_status.status.ActiveState }}, SubState: {{ service_status.status.SubState }}"

    - name: Fail if service is not active
      fail:
        msg: "Service failed to start properly. Status: {{ service_status.status.ActiveState }}"
      when: service_status.status.ActiveState != "active"

    - name: Wait for application to be ready
      wait_for:
        port: 8080
        host: localhost
        timeout: 60
        delay: 5
      become: yes

    - name: Test application health endpoint
      uri:
        url: "http://localhost:8080/actuator/health"
        method: GET
        timeout: 10
      register: health_check
      retries: 5
      delay: 10
      until: health_check.status == 200
      become: yes

    - name: Show health check result
      debug:
        msg: "Application health check: {{ health_check.status }} - {{ health_check.json.status if health_check.json is defined else 'No JSON response' }}"

    - name: Final service verification
      systemd:
        name: voting-app
      register: final_status
      become: yes

    - name: Deployment success confirmation
      debug:
        msg: "Deployment completed successfully. Service is {{ final_status.status.ActiveState }} and responding to health checks."